import os
import pandas as pd
from docx import Document
from docx.shared import Pt
import json

# Ensure 'files' directory exists
if not os.path.exists('files'):
    os.makedirs('files')

# Load the project_info from the JSON file generated by main.py
with open("project_info.json", "r") as f:
    project_info = json.load(f)

# Load the CSV file for the sections
csv_file = "covered-sections.csv"
if not os.path.exists(csv_file):
    raise FileNotFoundError(f"{csv_file} not found. Make sure the CSV file is in the current directory.")

# Determine which format template to use based on missing fields
template_directory = "format/"
template_file = "format1.docx"  # Default template (if all fields are filled)

if not project_info.get("[bid-type]") and not project_info.get("[cwsrf-number]"):
    # If both bid-type and cwsrf-number are missing, use format4.docx
    template_file = "format4.docx"
elif not project_info.get("[bid-type]"):
    # If only bid-type is missing, use format2.docx
    template_file = "format2.docx"
elif not project_info.get("[cwsrf-number]"):
    # If only cwsrf-number is missing, use format3.docx
    template_file = "format3.docx"

# Full path to the template file
template_path = os.path.join(template_directory, template_file)

# Load the template document
if not os.path.exists(template_path):
    raise FileNotFoundError(f"Template file {template_file} not found in {template_directory}")

# Load the CSV file into a DataFrame
df = pd.read_csv(csv_file)

# Iterate through each row of the DataFrame
for idx, row in df.iterrows():
    # Load the appropriate template document
    doc = Document(template_path)

    # Define submittal number based on index
    submittal_number = str(idx + 1).zfill(3)  # Submittal number starts at 001

    # Replace placeholders with the row-specific and consistent information
    replacements = {
        "[submittal-number]": submittal_number,
        "[section]": row["section"],
        "[title]": row["title"]
    }

    # Merge the consistent project information with the row-specific replacements
    replacements.update(project_info)

    # Replace placeholders in the document
    for paragraph in doc.paragraphs:
        for key, value in replacements.items():
            if key in paragraph.text:
                paragraph.text = paragraph.text.replace(key, str(value))

        for run in paragraph.runs:
            run.font.size = Pt(14)

    # Save each document with a unique filename in the 'files' folder
    title_filename = row["title"].replace(" ", "_").replace("/", "-")
    output_path = f'files/{title_filename}_Cover.docx'
    doc.save(output_path)
    print(f"Document {output_path} saved.")
